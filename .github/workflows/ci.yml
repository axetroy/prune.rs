name: ci

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.kind }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-latest, ubuntu-latest, windows-latest]

    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: full
      CARGO_TERM_COLOR: always

    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Install rust
        uses: hecrj/setup-rust-action@v1

      - name: Install clippy and rustfmt
        run: |
          rustup component add clippy
          rustup component add rustfmt
      - name: Log versions
        run: |
          rustc --version
          cargo --version
      - name: Configure cargo data directory
        # After this point, all cargo registry and crate data is stored in
        # $GITHUB_WORKSPACE/.cargo_home. This allows us to cache only the files
        # that are needed during the build process. Additionally, this works
        # around a bug in the 'cache' action that causes directories outside of
        # the workspace dir to be saved/restored incorrectly.
        run: |
          echo "CARGO_HOME=$(pwd)/.cargo_home" >> $GITHUB_ENV
      - name: Cache
        uses: actions/cache@v2
        with:
          # Note: crates from the denoland/deno git repo always get rebuilt,
          # and their outputs ('deno', 'libdeno.rlib' etc.) are quite big,
          # so we cache only those subdirectories of target/{debug|release} that
          # contain the build output for crates that come from the registry.
          path: |-
            .cargo_home
            target/*/.*
            target/*/build
            target/*/deps
          key: ${{ matrix.config.os }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ matrix.config.os }}-
      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: Run cargo check
        run: cargo check --locked

      - name: Run cargo clippy
        run: cargo clippy -- -D warnings

      - name: Run cargo test
        run: cargo test --locked

      - name: Build (linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          # for build aarch64-unknown-linux-musl
          sudo apt-get -y install gcc-x86-64-linux-gnu gcc-aarch64-linux-gnu

          rustup target add x86_64-unknown-linux-musl
          rustup target add i686-unknown-linux-musl
          rustup target add aarch64-unknown-linux-musl
          rustup target add aarch64-unknown-linux-gnu
          cargo build --release --locked --target x86_64-unknown-linux-musl
          cargo build --release --locked --target i686-unknown-linux-musl
          cargo build --release --locked --target aarch64-unknown-linux-musl
          zip -r target/x86_64-unknown-linux-musl/release/prune_linux_amd64.tar.gz target/x86_64-unknown-linux-musl/release/prune
          tar -cvzf target/i686-unknown-linux-musl/release/prune_darwin_amd64.tar.gz target/i686-unknown-linux-musl/release/prune
          tar -cvzf target/aarch64-unknown-linux-musl/release/prune_darwin_amd64.tar.gz target/aarch64-unknown-linux-musl/release/prune

      - name: Build (mac)
        if: startsWith(matrix.os, 'macOS')
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          cargo build --release --locked --target x86_64-apple-darwin
          # cargo build --release --locked --target aarch64-apple-darwin
          tar -cvzf target/x86_64-apple-darwin/release/prune_darwin_amd64.tar.gz target/x86_64-apple-darwin/release/prune
          # tar -cvzf target/aarch64-apple-darwin/release/prune_darwin_amd64.tar.gz target/aarch64-apple-darwin/release/prune

      - name: Build (windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          rustup target add x86_64-pc-windows-msvc
          rustup target add i686-pc-windows-msvc
          rustup target add aarch64-pc-windows-msvc
          cargo build --release --locked --target x86_64-pc-windows-msvc
          cargo build --release --locked --target i686-pc-windows-msvc
          cargo build --release --locked --target aarch64-pc-windows-msvc
          tar -cvzf target/x86_64-pc-windows-msvc/release/prune_window_amd64.tar.gz target/x86_64-pc-windows-msvc/release/prune.exe
          tar -cvzf target/i686-pc-windows-msvc/release/prune_window_amd64.tar.gz target/i686-pc-windows-msvc/release/prune.exe
          tar -cvzf target/aarch64-pc-windows-msvc/release/prune_window_amd64.tar.gz target/aarch64-pc-windows-msvc/release/prune.exe

      - name: Release
        uses: softprops/action-gh-release@v1
        if: |
          startsWith(github.repository, 'axetroy') &&
          startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GT_TOKEN }}
        with:
          files: |
            target/i686-pc-windows-msvc/release/prune_window_386.tar.gz
            target/aarch64-pc-windows-msvc/release/prune_window_arm64.tar.gz
            target/x86_64-pc-windows-msvc/release/prune_window_amd64.tar.gz

            target/x86_64-unknown-linux-musl/release/prune_linux_amd64.tar.gz
            target/i686-unknown-linux-musl/release/prune_linux_386.tar.gz
            target/aarch64-unknown-linux-musl/release/prune_linux_arm64.tar.gz

            target/x86_64-apple-darwin/release/prune_darwin_amd64.tar.gz
          draft: true
